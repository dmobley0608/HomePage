{"version":3,"sources":["Clock.js","NavBar.js","Greeting.js","BackgroundSetter.js","App.js","serviceWorker.js","index.js"],"names":["Clock","state","time","Date","this","update","setInterval","setState","clearInterval","toLocaleTimeString","React","Component","NavBar","className","href","title","today","todaysDate","toLocaleString","month","getDate","getFullYear","Greeting","getHours","document","body","style","backgroundImage","BackgroundSetter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAiCeA,E,kDA7BX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CAAEC,KAAM,IAAIC,MAFf,E,gEAKO,IAAD,OAChBC,KAAKC,OAASC,aAAY,WACtB,EAAKC,SAAS,CAAEL,KAAM,IAAIC,SAC3B,O,6CAIHK,cAAcJ,KAAKC,U,+BAGb,IACEH,EAASE,KAAKH,MAAdC,KAER,OACC,6BACI,2BAEKA,EAAKO,2B,GAxBHC,IAAMC,WCgBXC,MAbf,WACE,OACC,4BAAQC,UAAY,qDAClB,yBAAKA,UAAY,0BAClB,uBAAGA,UAAW,+CAA+CC,KAAK,4BAA4BC,MAAM,UAApG,eACA,uBAAGF,UAAW,+CAA+CC,KAAK,kDAAkDC,MAAM,SAA1H,UACA,yBAAKF,UAAY,oBAAjB,IAAqC,kBAAC,EAAD,UCRnCG,EAAQ,IAAIb,KAIZc,EAHQD,EAAME,eAAe,UAAW,CAAEC,MAAO,SAG5B,IAFfH,EAAMI,UAEqB,KAD1BJ,EAAMK,cAeJC,MATf,WACC,OAEC,6BACI,wBAAIT,UAAY,mCAAhB,6BAA6EI,EAA7E,OCZAD,G,MAAQ,IAAIb,OAGlB,WAGKa,EAAMO,WAAa,IAAQP,EAAMO,WAAa,GAExCC,SAASC,KAAKC,MAAMC,gBAAkB,6GAEtCX,EAAMO,WAAa,IAAMP,EAAMO,WAAa,GAE5CC,SAASC,KAAKC,MAAMC,gBAAkB,8IAEtCX,EAAMO,YAAc,GAEpBC,SAASC,KAAKC,MAAMC,gBAAkB,6IAItCH,SAASC,KAAKC,MAAMC,gBAAkB,8IClBjDC,GAWeC,MATf,WACE,OACE,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,MCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASc,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9d6c8d88.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Clock extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = { time: new Date() }; // initialise the state\r\n    }\r\n\r\n    componentDidMount() { // create the interval once component is mounted\r\n        this.update = setInterval(() => {\r\n            this.setState({ time: new Date() });\r\n        }, 1 * 1000); // every 1 seconds\r\n    }\r\n\r\n    componentWillUnmount() { // delete the interval just before component is removed\r\n        clearInterval(this.update);\r\n    }\r\n\r\n    render() {\r\n        const { time } = this.state; // retrieve the time from state\r\n\r\n        return (\r\n        \t<div>\r\n            \t<p>\r\n                \t{/* print the string prettily */}\r\n                \t{time.toLocaleTimeString()}\r\n            \t</p>\r\n        </div>);\r\n    }\r\n}\r\n\r\n\r\nexport default Clock;","import React from 'react';\r\n\r\nimport Clock from './Clock'\r\n\r\n\r\nfunction NavBar () {\r\n  return (\r\n  \t<header className = 'w-100 bg-lightest-blue ph3 pv2 pv3-ns ph3-m ph5-1'>\r\n\t    <nav className = 'f6 fw6 ttu tracked tl ' >    \t\r\n\t\t \t<a className =\"link grow black dib mr3 br-pill bg-white pa2\" href=\"https://smile.amazon.com/\" title=\"Amazon\">Go Shopping</a> \r\n\t\t \t<a className =\"link grow black dib mr3 br-pill bg-white pa2\" href=\"https://www.udemy.com/home/my-courses/learning/\" title=\"Udemy\">Udemy </a> \t\t   \t\t\t   \t     \r\n\t\t \t<div className = 'fr black dib mr4'> <Clock/></div>\r\n\t    </nav>\r\n\r\n\t</header>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n\r\n\r\nconst today = new Date();\r\nconst month = today.toLocaleString('default', { month: 'long' });\r\nconst day = today.getDate();\r\nconst year = today.getFullYear();\r\nconst todaysDate = month + \" \" + day + \", \" + year;\r\n\r\n\r\n\r\n\r\nfunction Greeting(){\r\n\treturn(\r\n\r\n\t\t<div>\r\n\t\t    <h1 className = \" tc f1 w-100 washed-blue pv7-ns\"> Welcome Dwight! Today is {todaysDate}.</h1>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Greeting;\r\n\r\n","import React from 'react';\r\nimport './BackgroundSetter.css'\r\n\r\n\r\nconst today = new Date();\r\n\r\n\r\nfunction environmentSetter(){\r\n\t\r\n\t\r\n\tif((today.getHours() > 12) && (today.getHours() < 17)){\r\n\t\t\r\n\t\treturn(  document.body.style.backgroundImage = 'url(' + \"https://images.unsplash.com/photo-1571498760478-e31d3eb2e276?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9\" + ')');\r\n\t\t\r\n\t}else if (today.getHours() > 16 && today.getHours() < 21){\r\n\t\t\r\n\t\treturn(  document.body.style.backgroundImage = 'url(' + \"https://images.unsplash.com/photo-1472120435266-53107fd0c44a?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1050&q=80\" + ')');\r\n\t\t\t\r\n\t}else if (today.getHours() >= 21){\r\n\t\t\r\n\t\treturn(  document.body.style.backgroundImage = 'url(' + \"https://images.unsplash.com/photo-1536746803623-cef87080bfc8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" + ')');\r\n\t\t\r\n\t}else{\r\n\t\t\r\n\t\treturn(  document.body.style.backgroundImage = 'url(' + \"https://images.unsplash.com/photo-1500382017468-9049fed747ef?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=500&q=60\" + ')');\r\n\t\t\r\n\t}\r\n\t\r\n}\r\n\r\n\texport default environmentSetter;","import React from 'react';\nimport './App.css';\nimport NavBar from './NavBar';\nimport Greeting from './Greeting'\nimport BackgroundSetter from './BackgroundSetter'\n\nBackgroundSetter();\n\nfunction App() {\n  return (\n    <div>\n        <NavBar/>\n        <Greeting/>        \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Tachyons from 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}